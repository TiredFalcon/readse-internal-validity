RecordedDate,ResponseId,Qlevel,5eb233fadeb70a6af22379bf,5eb233fadeb70a6af2237939,5eb233fadeb70a6af2237a20,5eb23431deb70a6af2247fa8,5eb23431deb70a6af2248142,5eb23451deb70a6af224e429,5eb23451deb70a6af224dc9a,5eb23451deb70a6af224d76a,5eb23451deb70a6af224d789,5eb23451deb70a6af224df39,5eb23451deb70a6af224dcd2,5eb23452deb70a6af224fd92,5eb23452deb70a6af224face,5eb23452deb70a6af224f45e,5eb23455deb70a6af225135a,5eb23455deb70a6af2250d84,5eb23455deb70a6af2251726,5eb23455deb70a6af22507c3,5eb234b5deb70a6af225d63e,5eb234b5deb70a6af225dbd8,5eb234b5deb70a6af225d7d1,5eb234b5deb70a6af225f65a,5eb234b5deb70a6af225f6fd,5eb234c6deb70a6af225fed1,5eb234c6deb70a6af225fee2,5eb234c6deb70a6af2261c0c,5eb234c6deb70a6af2261837,5eb234c6deb70a6af2260959,5eb234c6deb70a6af2260571,5eb233fadeb70a6af22379bf-rev,5eb234c6deb70a6af225fbb3,5eb233fadeb70a6af2237939-rev,5eb233fadeb70a6af2237a20-rev,5eb23431deb70a6af2248142-rev,5eb23431deb70a6af2247fa8-rev,5eb23451deb70a6af224e429-rev,5eb23451deb70a6af224d76a-rev,5eb23451deb70a6af224dc9a-rev,5eb23451deb70a6af224dcd2-rev,5eb23451deb70a6af224d789-rev,5eb23451deb70a6af224df39-rev,5eb23452deb70a6af224face-rev,5eb23452deb70a6af224f45e-rev,5eb23455deb70a6af225135a-rev,5eb23452deb70a6af224fd92-rev,5eb23455deb70a6af2250d84-rev,5eb23455deb70a6af22507c3-rev,5eb23455deb70a6af2251726-rev,5eb234b5deb70a6af225d63e-rev,5eb234b5deb70a6af225d7d1-rev,5eb234c6deb70a6af225fee2-rev,5eb234b5deb70a6af225f6fd-rev,5eb234b5deb70a6af225dbd8-rev,5eb234c6deb70a6af225fed1-rev,5eb234c6deb70a6af2260571-rev,5eb234c6deb70a6af2261c0c-rev,5eb234c6deb70a6af2260959-rev,5eb234c6deb70a6af2261837-rev,5eb234c6deb70a6af225fbb3-rev,5eb234b5deb70a6af225f65a-rev
Recorded Date,Response ID,"First, a question about you. What is your education level?","Paragraph A
After obtaining all the commits with refactoring operations, we filtered out commits involved in more than one refactoring type, to avoid the impact of irrelevant refactorings when assessing the naturalness change.


Paragraph B
After obtaining all the commits with refactoring operations, we filtered out commits involved in which more than one refactoring type was applied, again to better isolate and study the effect of a single type of refactoring operation on the code naturalness.



Paragraph A is more readable than paragraph B.","Paragraph A
After obtaining all the commits with refactoring operations, we filtered out commits involved in which more than one refactoring type was applied, again to better isolate and study the effect of a single type of refactoring operation on the code naturalness.


Paragraph B
After obtaining all the commits with refactoring operations, we filtered out commits involved in which more than one refactoring type was applied, again to better isolate and study the effect of a single type of refactoring operation on the code naturalness. In the end, we obtained 1,448 refactoring operations from 619 projects, while no relevant refactorings are detected in the other 881 projects.



Paragraph A is more readable than paragraph B.","Paragraph A
Our goal is to understand whether refactoring can improve the naturalness of code. For this reason, here we assess how the code naturalness is impacted by both overall and specific types of refactorings.


Paragraph B
Our goal is to investigate whether refactoring operations increase the naturalness of the refactored code. We assess how the code naturalness is impacted (i) overall, meaning when considering all types of refactoring operations together, and (ii) by specific types of refactoring.



Paragraph A is more readable than paragraph B.","Paragraph A
The evaluator also had to assign a negative, neutral, or positive sentiment to the reported opinion and, finally, she had to identify in the selected part of the sentence the lexical tokes (e.g., noun, pronoun, adjective, etc.) referring to: (i) the linked library, and (ii) the quality aspect(s).


Paragraph B
The evaluator also had to assign a negative or positive sentiment to the reported opinion (this information will be used in the context of the opinion miner) and, finally, she had to identify in the selected part of the sentence the lexical tokes (e.g., noun, pronoun, adjective, etc.) referring to: (i) the linked API, and (ii) the quality aspect(s).



Paragraph A is more readable than paragraph B.","Paragraph A
The opinion miner is in charge of analyzing the sentences stored by fine-grained liker in the database to identify the ones reporting opinions and classify the quality aspect(s) discussed in them (e.g., performance) and the sentiment of the opinion (i.e.,positive, neutral, or negative). Based on what discussed in Section 2 (i.e., sentiment analysis tools are unsuitable for our purpose), we decided to follow a totally different path for the implementation of the opinion miner (but then also compare it with state-of-the-art sentiment analysis tools, as it will be shown in Section 5).


Paragraph B
The opinion miner is in charge of analyzing the sentences classified as relevant of the APIs opinion mining (i.e., those assigned to an aspect by the aspect classifier to identify the sentiment of the opinion (i.e.,positive or negative). Based on what discussed in Section 2. Also in this case we investigated two different options for the implementation of the opinion miner, and we evaluate their performance as described in Section 4 to pick the best one for our approach.



Paragraph A is more readable than paragraph B.","Paragraph A
However, the main purpose of those code refactoring/clean up tasks is to improve the code comprehensibility without touching any documentation. Variable and method renaming refactoring (i.e., renaming a variable or method to better fit its functionality) is the most common way to make the code easier to understand. Also, variable and method extract refactoring (i.e., replacing literal values or inner method code blocks by introducing new variables or methods) is a standard approach to not only avoid existing or potential redundant code, but also better present and explain the implementation logic of the extracted code snippets.


Paragraph B
However, the main purpose of those code refactoring/clean up tasks is to improve the code understandability. Variable and method renaming refactoring (i.e., renaming a variable or method to better reflect its functionality) is the most common way to make the code easier to comprehend. Also popular are code transformations aimed at replacing literal values with variables or splitting long functions through extract method refactoring. The latter allows not only to foster comprehensibility, but also the reusability of small code snippets.



Paragraph A is more readable than paragraph B.","Paragraph A
Rodriguez-Perez et al. conducted two case studies to introduce a metric Time To Notify(TNN) which describe how much time it takes for a bug to be notified/reported since the bug was introduced into the source code and examine how this metric is related to the software maintenance and evolution.


Paragraph B
Rodriguez-Perez et al. conducted two case studies and studied the Time To Notify (TNN) metric which describes how much time it takes for a bug to be notified/reported since the bug was introduced into the source code. They examine how this metric is related to software maintenance and evolution. Interestingly, they found relatively high mean values of TTN in the projects: 312 and 431 days.



Paragraph A is more readable than paragraph B.","Paragraph A
While in the cases we analyzed the issue was spotted and fixed quickly by the developer, there might be non-trivial cases in which only a subset of the test suite is executed for regression testing (e.g., due to a limited testing budget) and a non-executed broken test is not identified by the developer. For researchers, this is an opportunity to study test breaking-changes and to develop techniques able to alert the developer when a change she implemented might require a double check of (part of) the test suite. For practitioners, continuous integration practices can help in timely spotting these issues in most of cases.


Paragraph B
While in the cases we analyzed the issue was spotted and fixed quickly by the developer, there might be non-trivial cases in which only a subset of the test suite is executed for regression testing (e.g., due to a limited testing budget) and a non-executed broken test is not identified by the developer.



Paragraph A is more readable than paragraph B.","Paragraph A
While the lexical pattern defined to automatically identify remedy commits can return false positives, these have been excluded in our study through manual validation, thus do not influencing our findings in any way.


Paragraph B
In addition to that, we used lexical patterns to identify candidate remedy commits. While these lexical patterns can return false positives, these have been excluded in our study through manual validation, thus do not influencing our findings in any way.



Paragraph A is more readable than paragraph B.","Paragraph A
Threats to construct validity concern the relation between the theory and the observation, and in this work are mainly due to the manual analysis we performed to identify the reasons behind the quick remedy changes performed by developers. To mitigate subjectivity bias in such a process, every commit was assigned to two authors who manually analyzed it independently. Then, in the case of a disagreement, a third author was assigned to the commit to solve the conflict.


Paragraph B
Threats to construct validity concern the relation between the theory and the observation, and in this work are mainly due to the manual analysis we performed to identify the reasons behind the quick remedy changes performed by developers.



Paragraph A is more readable than paragraph B.","Paragraph A
Sliwerski et al., studied the day of the week and size of commits for two totally different projects, Eclipse and Mozilla, and found that the commits on Fridays are buggiest and large commits are more likely to contain bugs.


Paragraph B
Sliwerski et al. studied the day of the week and the size of commits on two completely different projects, Eclipse and Mozilla. They found that the commits on Friday were the buggiest, and large commits were more likely to contain bugs.



Paragraph A is more readable than paragraph B.","Paragraph A
Table 1 shows the number of identified clones. We found that, out of the 500 snippets considered as non-leveraged, only 30 (4%) have at least one detected clone in the considered GitHub files. Thus, while we acknowledge a certain level of noise in our analysis (i.e., misclassification of leveraged snippets as non-leveraged), such a noise should be quite limited.


Paragraph B
We found that, out of the 500 snippets considered as non-leveraged, only 30 (4%) have at least one detected clone in the considered GitHub files. Thus, while we acknowledge a certain level of noise in our analysis (i.e., misclassification of leveraged snippets as non-leveraged), we believe that the findings reported in the following are unlikely to be substantially influenced by such a noise.



Paragraph A is more readable than paragraph B.","Paragraph A
Sojer and Henkel focused on the legal and economic risks of code reuse from the Internet. They surveyed . They found that ""as is"" or ad-hoc reuse is a common practice in commercial software development.


Paragraph B
Sojer and Henkel focused on the legal and economic risks of code reuse from the Internet. They surveyed 869 professional software developers to investigate if the reuse of code snippets from internet is a common practice in commercial software development. They found that the 88% developers reuse internet code and the 19% of them consider reuse as a very important activity for their work. Furthermore, the analysis shows a growth in the importance of internet code reuse in recent years.



Paragraph A is more readable than paragraph B.","Paragraph A
To keep into account the strong unbalancing of our dataset (i.e., we have many more not-reused than reused answers), we experimented each model when (i) not balancing the training sets, (ii) balancing the training sets by under-sampling the majority class by means of the Weka implementations of the SpreadSubSample filter, and (iii) balancing the training sets by generating artificial instances of the minority class by means of the Weka implementation of the SMOTE filter.


Paragraph B
In our dataset we have many more not-reused than reused answers. In order to keep into account such a strong unbalancing, we experimented each machine learning technique when (i) not balancing the training sets; (ii) balancing the training sets by under-sampling the majority class by means of the Weka implementations of the SpreadSubSample filter; and (iii) balancing the training sets by generating artificial instances of the minority class by means of the Weka implementation of the SMOTE filter.



Paragraph A is more readable than paragraph B.","Paragraph A
The remainder of the paper is structured as follows. We review related work in Section 2. In Section 3 we describe our study design to investigate the research questions. Then our results are present in Section 4. We declare the threats to validity in Section 5 and conclude our findings in Section 6.


Paragraph B
The remainder of the paper is structured as follows. We review related literature in Section 2. In Section 3 we describe the study design we adopted to answer our research question. The achieved results are presented in Section 4. Section 5 discuss the threats that could affect the validity of our study, while Section 6 summarizes our observations and outlines directions for future work.



Paragraph A is more readable than paragraph B.","Paragraph A
In most cases, a change occurred in a comment update (113), while in a few cases (12) a new comment was added. For updates, which were in most cases closely related to an inconsistency, we observed three main reasons why developers updated comments: (i) the comment was wrong before (35) (i.e., it was already wrong when it was first added, or it became outdated after a change), (ii) they updated the comment together/following a new implementation (25), (iii) they wanted to explain the actual implementation (53) in more detail.


Paragraph B
In most cases, the change occurred in the form of a comment update (113), while in a few cases (12) a new comment was added. We observed three main reasons why developers update comments: (i) the comment wrongly describes the application logic (35), due to an error done when the comment was written in the first place or to an inconsistency introduced during the code evolution (in these cases we were not able to trace back to the specific cause of the problem); (ii) the comment needs to be updated as a consequence of a new implementation logic (25); (iii) the comment is improved to explain the actual implementation in more details (53).



Paragraph A is more readable than paragraph B.","Paragraph A
Although these types of changes are typically not due to code-comment inconsistencies, we found cases where the comment contained references to other source code elements, or links to, for instance, bug reports. These cases can be considered dangerous from the inconsistency point of view, hence, we marked these as well in the taxonomy.


Paragraph B
Although these types of changes are usually not performed because of code-comment inconsistencies, we found cases where the comment contained references, for example, to other source code elements or bug reports. These cases can be considered dangerous from an inconsistency point of view, as invalid/outdated references can be disturbing in the code. For example in Google Guava a commit says: ""Updated a comment in ListenerCallQueue to point at SequentialExecutor instead of the deprecated SerializingExecutor wrapper interface"".



Paragraph A is more readable than paragraph B.","Paragraph A
For instance, in a commit of QR Code generator a comment describing how an array element of the QR code is calculated was fixed (following a copy-paste mistake). In WordPress for Android, the previously misleading comment of the ""getPath()"" method was replaced from ""descendants must implement this to send their specific request to the stats api"" to ""descendants must implement this to return their specific path to the stats rest api"". We also observed interesting cases when the fix was in an example code inside the comment (see).


Paragraph B
In WordPress for Android, the previously misleading comment of the ""getPath()"" method was replaced from ""descendants must implement this to send their specific request to the stats api"" to ""descendants must implement this to return their specific path to the stats rest api"". We also observed interesting cases in which the comment was fixed to update a code usage example reported in the comment and not aligned with the actual code implementation (see).



Paragraph A is more readable than paragraph B.","Paragraph A
To overcome this deadlock, recent research initiatives have advocated for the development of automated context-aware recommender systems that automatically generate high-quality documentation, contextual to any given task at hand; and exemplified by a first wave of automated approaches for the generation and recommendation of documentation (e.g.,).


Paragraph B
To overcome this deadlock, recent research initiatives have advocated for the development of automated context-aware recommender systems that automatically generate high-quality documentation, contextual to any given task at hand. This has led to a first wave of automated approaches for the generation and recommendation of documentation (e.g.,).



Paragraph A is more readable than paragraph B.","Paragraph A
Moreover, since our goal is to further research in the context of documentation recommender systems, the second contribution of this paper is a study with practitioners to understand what types of documentation they perceive as useful when confronted with specific software engineering tasks, to answer our second RQ:.


Paragraph B
Moreover, since our goal is to further research in the context of documentation recommender systems, the second contribution of this paper is an insight into the types of documentation that practitioners perceive as useful when confronted with specific software engineering tasks. Therefore, we formulate our second RQ as:.



Paragraph A is more readable than paragraph B.","Paragraph A
Previous studies have investigated software documentation from different aspects, mainly focusing on tools & approaches and (empirical) studies. In the following, we summarize the closest ones to ours.


Paragraph B
Previous studies have investigated software documentation from different aspects, mainly focusing on tools & approaches for manual and automated documentation, and (empirical) studies aimed at investigation different aspects such as documentation issues, developer concerns, among other. In the following, we summarize the closest ones to our with special emphasis on the empirical studies.



Paragraph A is more readable than paragraph B.","Paragraph A
(Empirical) Studies. A variety of empirical studies have targeted software documentation artifacts aiming at (i) investigating its importance and impact in software life cycle, (ii) describing developers issues and concerns when dealing with software documentation, (iii) investigating the quality attributes required in documentation artifacts, (iv) providing guidelines and recommendations for constructing it, and (v) proposing frameworks and tools for assessing developers' concern in this context (such as cost, benefit and quality attributes).


Paragraph B
The empirical studies in the literature can be classified based on their main goal into five broad categories: Studies (i) investigating the importance and impact of documentation in the software life cycle; (ii) describing developers issues and concerns when dealing with software documentation; (iii) investigating the quality attributes required in documentation artifacts; (iv) providing guidelines and recommendations on how to write and maintain documentation; and (v) proposing frameworks and tools for assessing developers' concerns in this context.



Paragraph A is more readable than paragraph B.","Paragraph A
Software summarization techniques and tools with the goal of providing abstractive and extractive summaries has been studied for a diverse set of software artifacts, such as bug reports, classes and methods, unit tests, commit messages, release notes, user reviews, code examples and user stories.


Paragraph B
Tools & Approaches. A plethora of works have been focused on supporting the automated generation and retrieval. For example, software summarization techniques and tools with the goal of providing abstractive and extractive summaries has been porposed for a diverse set of software artifacts, such as bug reports, classes and methods, unit tests, commit messages, release notes, user reviews, code snippets, and user stories.



Paragraph A is more readable than paragraph B.","Paragraph A
On the other side, documentation has been analyzed with a diversity of empirical studies that (i) report evidence of its importance and impact in the software cycle development, (ii) describe problems developers face when dealing with it, (iii) list quality attributes required in software documentation, (iv) provide recommendations for constructing it (including standards) , or (v) propose frameworks and tools for evaluating documentation concerns such as cost, benefit and quality attributes of software documentation.


Paragraph B
(Empirical) Studies. Software documentation has been analyzed in diverse empirical studies that (i) report evidence of its importance and impact in the software life cycle, (ii) describe problems that developers face when dealing with it, (iii) list quality attributes required in documentation, (iv) provide recommendations for constructing it (including standards), and (v) propose frameworks and tools for evaluating documentation concerns such as cost, benefit and quality attributes. Due to space limitations we summarize the closest ones to our study in Table [tab:related_SwTechDocWorks].



Paragraph A is more readable than paragraph B.","Paragraph A
Referring to deprecated information is also one of the main reasons for up-to-dateness issues, and can affect several types of documentation in different ways: It includes having deprecated information in the project's website (e.g.,**""homepage recommends deprecated commands""), outdated copyright information and version numbers in the code base, as well as outdated references (e.g., links to old versions of the system in the documentation), which was the most prevalent issue within this category. For example, one user reported that ""the example linked in the documentation is using the 3.x version of the API, and that may be confusing to readers"".


Paragraph B
Referring to deprecated information is another reason for up-to-dateness issues and can affect several types of documentation in different ways. It includes having deprecated information in the project's website (e.g.,**""homepage recommends deprecated commands""), outdated copyright information and version numbers in the code base, as well as outdated references (e.g., links to old versions of the system in the documentation), which was the most prevalent issue within this category. For example, one user reported that ""the example linked in the documentation is using the 3.x version of the API, and that may be confusing to readers"".



Paragraph A is more readable than paragraph B.","Paragraph A
Common Solution: Writing script is the most adopted solution regarding the automatic documentation deployment, while regarding the missing features there was no common solution (if any) and individuals usually points to different possible alternatives (e.g.,).


Paragraph B
Common Solution: Writing script was the most adopted solution regarding the automatic documentation deployment. Concerning the missing features there was no specific solution and individuals usually were pointed to different possible alternatives (e.g.,).



Paragraph A is more readable than paragraph B.","Paragraph A
Interestingly, we observed that developers adopt preventative solutions to ensure the up-to-dateness of the project's documentation. For example, some projects have added documentation up-to-dateness as one of the items to check in the contribution to-do list, and others have pushed this forward by making Javadoc update mandatory for pull request acceptance.


Paragraph B
Some developers adopt preventative solutions to ensure the documentation up-to-dateness, adding documentation up-to-dateness as one of the items to check in the contribution to-do list, or even pushing this forward by making Javadoc update mandatory for pull request acceptance.



Paragraph A is more readable than paragraph B.","Paragraph A
However, we found one case in Apache httpd documentation mailing list where the traceability information between translations of a document was still managed manually, e.g., by adding a line of comment at top of translations referring to original document and more particularly ""The whole point of the comment is to see which exact revisions of the original file you have to diff to see the changes."".


Paragraph B
Interestingly, in another thread of the Apache httpd mailing list they discuss an issue of harmful warning messages originating from meta-information they also use to enforce up-to-dateness of different translations. As they conclude, ""The whole point of the comment is to see which exact revisions of the original file you have to diff to see the changes."".



Paragraph A is more readable than paragraph B.","Paragraph A
Example: We observed different causes of incompleteness such as missing explanation (e.g.,**""is there any idea what ""frequently used"" might mean?""), a component in a library (e.g.,**""The documentation on [...] is missing information about the toolbar buttons""), API behavior clarification (e.g.,**""I think that we should add documentation ensuring that the user passes a tree with reset bounds""), or compatibility information (e.g.,**""Explicitly mention if clang 4.x, 5.x are supported"").


Paragraph B
Completeness accounts for %53 of issues in this section. We observed different causes of incompleteness such as missing explanation (e.g.,**""is there any idea what ""frequently used"" might mean?""), a component in a library (e.g.,**""The documentation on [...] is missing information about the toolbar buttons""), API behavior clarification (e.g.,**""I think that we should add documentation ensuring that the user passes a tree with reset bounds""), or compatibility information (e.g.,**""Explicitly mention if clang 4.x, 5.x are supported"").



Paragraph A is more readable than paragraph B.","Paragraph A
After obtaining all the commits with refactoring operations, we filtered out commits involved in which more than one refactoring type was applied, again to better isolate and study the effect of a single type of refactoring operation on the code naturalness.


Paragraph B
After obtaining all the commits with refactoring operations, we filtered out commits involved in more than one refactoring type, to avoid the impact of irrelevant refactorings when assessing the naturalness change.



Paragraph A is more readable than paragraph B.","Paragraph A
Example: The incompleteness could raise from different things such as missing explanation (e.g.,**""is there any idea what ""frequently used"" might mean?""), a component in a library (e.g.,**""The documentation on [...] is missing information about the toolbar buttons""), API behavior clarification (e.g.,**""I think that we should add documentation ensuring that the user passes a tree with reset bounds""), or compatibility information (e.g.,**""Explicitly mention if clang 4.x, 5.x are supported""). Fig 4.4 illustrate other type of missing information we observed.


Paragraph B
Example: We observed different causes of incompleteness such as missing explanation (e.g.,**""is there any idea what ""frequently used"" might mean?""), a component in a library (e.g.,**""The documentation on [...] is missing information about the toolbar buttons""), API behavior clarification (e.g.,**""I think that we should add documentation ensuring that the user passes a tree with reset bounds""), or compatibility information (e.g.,**""Explicitly mention if clang 4.x, 5.x are supported"").



Paragraph A is more readable than paragraph B.","Paragraph A
After obtaining all the commits with refactoring operations, we filtered out commits involved in which more than one refactoring type was applied, again to better isolate and study the effect of a single type of refactoring operation on the code naturalness. In the end, we obtained 1,448 refactoring operations from 619 projects, while no relevant refactorings are detected in the other 881 projects.


Paragraph B
After obtaining all the commits with refactoring operations, we filtered out commits involved in which more than one refactoring type was applied, again to better isolate and study the effect of a single type of refactoring operation on the code naturalness.



Paragraph A is more readable than paragraph B.","Paragraph A
Our goal is to investigate whether refactoring operations increase the naturalness of the refactored code. We assess how the code naturalness is impacted (i) overall, meaning when considering all types of refactoring operations together, and (ii) by specific types of refactoring.


Paragraph B
Our goal is to understand whether refactoring can improve the naturalness of code. For this reason, here we assess how the code naturalness is impacted by both overall and specific types of refactorings.



Paragraph A is more readable than paragraph B.","Paragraph A
The opinion miner is in charge of analyzing the sentences classified as relevant of the APIs opinion mining (i.e., those assigned to an aspect by the aspect classifier to identify the sentiment of the opinion (i.e.,positive or negative). Based on what discussed in Section 2. Also in this case we investigated two different options for the implementation of the opinion miner, and we evaluate their performance as described in Section 4 to pick the best one for our approach.


Paragraph B
The opinion miner is in charge of analyzing the sentences stored by fine-grained liker in the database to identify the ones reporting opinions and classify the quality aspect(s) discussed in them (e.g., performance) and the sentiment of the opinion (i.e.,positive, neutral, or negative). Based on what discussed in Section 2 (i.e., sentiment analysis tools are unsuitable for our purpose), we decided to follow a totally different path for the implementation of the opinion miner (but then also compare it with state-of-the-art sentiment analysis tools, as it will be shown in Section 5).



Paragraph A is more readable than paragraph B.","Paragraph A
The evaluator also had to assign a negative or positive sentiment to the reported opinion (this information will be used in the context of the opinion miner) and, finally, she had to identify in the selected part of the sentence the lexical tokes (e.g., noun, pronoun, adjective, etc.) referring to: (i) the linked API, and (ii) the quality aspect(s).


Paragraph B
The evaluator also had to assign a negative, neutral, or positive sentiment to the reported opinion and, finally, she had to identify in the selected part of the sentence the lexical tokes (e.g., noun, pronoun, adjective, etc.) referring to: (i) the linked library, and (ii) the quality aspect(s).



Paragraph A is more readable than paragraph B.","Paragraph A
However, the main purpose of those code refactoring/clean up tasks is to improve the code understandability. Variable and method renaming refactoring (i.e., renaming a variable or method to better reflect its functionality) is the most common way to make the code easier to comprehend. Also popular are code transformations aimed at replacing literal values with variables or splitting long functions through extract method refactoring. The latter allows not only to foster comprehensibility, but also the reusability of small code snippets.


Paragraph B
However, the main purpose of those code refactoring/clean up tasks is to improve the code comprehensibility without touching any documentation. Variable and method renaming refactoring (i.e., renaming a variable or method to better fit its functionality) is the most common way to make the code easier to understand. Also, variable and method extract refactoring (i.e., replacing literal values or inner method code blocks by introducing new variables or methods) is a standard approach to not only avoid existing or potential redundant code, but also better present and explain the implementation logic of the extracted code snippets.



Paragraph A is more readable than paragraph B.","Paragraph A
While in the cases we analyzed the issue was spotted and fixed quickly by the developer, there might be non-trivial cases in which only a subset of the test suite is executed for regression testing (e.g., due to a limited testing budget) and a non-executed broken test is not identified by the developer.


Paragraph B
While in the cases we analyzed the issue was spotted and fixed quickly by the developer, there might be non-trivial cases in which only a subset of the test suite is executed for regression testing (e.g., due to a limited testing budget) and a non-executed broken test is not identified by the developer. For researchers, this is an opportunity to study test breaking-changes and to develop techniques able to alert the developer when a change she implemented might require a double check of (part of) the test suite. For practitioners, continuous integration practices can help in timely spotting these issues in most of cases.



Paragraph A is more readable than paragraph B.","Paragraph A
Rodriguez-Perez et al. conducted two case studies and studied the Time To Notify (TNN) metric which describes how much time it takes for a bug to be notified/reported since the bug was introduced into the source code. They examine how this metric is related to software maintenance and evolution. Interestingly, they found relatively high mean values of TTN in the projects: 312 and 431 days.


Paragraph B
Rodriguez-Perez et al. conducted two case studies to introduce a metric Time To Notify(TNN) which describe how much time it takes for a bug to be notified/reported since the bug was introduced into the source code and examine how this metric is related to the software maintenance and evolution.



Paragraph A is more readable than paragraph B.","Paragraph A
Sliwerski et al. studied the day of the week and the size of commits on two completely different projects, Eclipse and Mozilla. They found that the commits on Friday were the buggiest, and large commits were more likely to contain bugs.


Paragraph B
Sliwerski et al., studied the day of the week and size of commits for two totally different projects, Eclipse and Mozilla, and found that the commits on Fridays are buggiest and large commits are more likely to contain bugs.



Paragraph A is more readable than paragraph B.","Paragraph A
In addition to that, we used lexical patterns to identify candidate remedy commits. While these lexical patterns can return false positives, these have been excluded in our study through manual validation, thus do not influencing our findings in any way.


Paragraph B
While the lexical pattern defined to automatically identify remedy commits can return false positives, these have been excluded in our study through manual validation, thus do not influencing our findings in any way.



Paragraph A is more readable than paragraph B.","Paragraph A
Threats to construct validity concern the relation between the theory and the observation, and in this work are mainly due to the manual analysis we performed to identify the reasons behind the quick remedy changes performed by developers.


Paragraph B
Threats to construct validity concern the relation between the theory and the observation, and in this work are mainly due to the manual analysis we performed to identify the reasons behind the quick remedy changes performed by developers. To mitigate subjectivity bias in such a process, every commit was assigned to two authors who manually analyzed it independently. Then, in the case of a disagreement, a third author was assigned to the commit to solve the conflict.



Paragraph A is more readable than paragraph B.","Paragraph A
Sojer and Henkel focused on the legal and economic risks of code reuse from the Internet. They surveyed 869 professional software developers to investigate if the reuse of code snippets from internet is a common practice in commercial software development. They found that the 88% developers reuse internet code and the 19% of them consider reuse as a very important activity for their work. Furthermore, the analysis shows a growth in the importance of internet code reuse in recent years.


Paragraph B
Sojer and Henkel focused on the legal and economic risks of code reuse from the Internet. They surveyed . They found that ""as is"" or ad-hoc reuse is a common practice in commercial software development.



Paragraph A is more readable than paragraph B.","Paragraph A
In our dataset we have many more not-reused than reused answers. In order to keep into account such a strong unbalancing, we experimented each machine learning technique when (i) not balancing the training sets; (ii) balancing the training sets by under-sampling the majority class by means of the Weka implementations of the SpreadSubSample filter; and (iii) balancing the training sets by generating artificial instances of the minority class by means of the Weka implementation of the SMOTE filter.


Paragraph B
To keep into account the strong unbalancing of our dataset (i.e., we have many more not-reused than reused answers), we experimented each model when (i) not balancing the training sets, (ii) balancing the training sets by under-sampling the majority class by means of the Weka implementations of the SpreadSubSample filter, and (iii) balancing the training sets by generating artificial instances of the minority class by means of the Weka implementation of the SMOTE filter.



Paragraph A is more readable than paragraph B.","Paragraph A
The remainder of the paper is structured as follows. We review related literature in Section 2. In Section 3 we describe the study design we adopted to answer our research question. The achieved results are presented in Section 4. Section 5 discuss the threats that could affect the validity of our study, while Section 6 summarizes our observations and outlines directions for future work.


Paragraph B
The remainder of the paper is structured as follows. We review related work in Section 2. In Section 3 we describe our study design to investigate the research questions. Then our results are present in Section 4. We declare the threats to validity in Section 5 and conclude our findings in Section 6.



Paragraph A is more readable than paragraph B.","Paragraph A
We found that, out of the 500 snippets considered as non-leveraged, only 30 (4%) have at least one detected clone in the considered GitHub files. Thus, while we acknowledge a certain level of noise in our analysis (i.e., misclassification of leveraged snippets as non-leveraged), we believe that the findings reported in the following are unlikely to be substantially influenced by such a noise.


Paragraph B
Table 1 shows the number of identified clones. We found that, out of the 500 snippets considered as non-leveraged, only 30 (4%) have at least one detected clone in the considered GitHub files. Thus, while we acknowledge a certain level of noise in our analysis (i.e., misclassification of leveraged snippets as non-leveraged), such a noise should be quite limited.



Paragraph A is more readable than paragraph B.","Paragraph A
In most cases, the change occurred in the form of a comment update (113), while in a few cases (12) a new comment was added. We observed three main reasons why developers update comments: (i) the comment wrongly describes the application logic (35), due to an error done when the comment was written in the first place or to an inconsistency introduced during the code evolution (in these cases we were not able to trace back to the specific cause of the problem); (ii) the comment needs to be updated as a consequence of a new implementation logic (25); (iii) the comment is improved to explain the actual implementation in more details (53).


Paragraph B
In most cases, a change occurred in a comment update (113), while in a few cases (12) a new comment was added. For updates, which were in most cases closely related to an inconsistency, we observed three main reasons why developers updated comments: (i) the comment was wrong before (35) (i.e., it was already wrong when it was first added, or it became outdated after a change), (ii) they updated the comment together/following a new implementation (25), (iii) they wanted to explain the actual implementation (53) in more detail.



Paragraph A is more readable than paragraph B.","Paragraph A
In WordPress for Android, the previously misleading comment of the ""getPath()"" method was replaced from ""descendants must implement this to send their specific request to the stats api"" to ""descendants must implement this to return their specific path to the stats rest api"". We also observed interesting cases in which the comment was fixed to update a code usage example reported in the comment and not aligned with the actual code implementation (see).


Paragraph B
For instance, in a commit of QR Code generator a comment describing how an array element of the QR code is calculated was fixed (following a copy-paste mistake). In WordPress for Android, the previously misleading comment of the ""getPath()"" method was replaced from ""descendants must implement this to send their specific request to the stats api"" to ""descendants must implement this to return their specific path to the stats rest api"". We also observed interesting cases when the fix was in an example code inside the comment (see).



Paragraph A is more readable than paragraph B.","Paragraph A
Although these types of changes are usually not performed because of code-comment inconsistencies, we found cases where the comment contained references, for example, to other source code elements or bug reports. These cases can be considered dangerous from an inconsistency point of view, as invalid/outdated references can be disturbing in the code. For example in Google Guava a commit says: ""Updated a comment in ListenerCallQueue to point at SequentialExecutor instead of the deprecated SerializingExecutor wrapper interface"".


Paragraph B
Although these types of changes are typically not due to code-comment inconsistencies, we found cases where the comment contained references to other source code elements, or links to, for instance, bug reports. These cases can be considered dangerous from the inconsistency point of view, hence, we marked these as well in the taxonomy.



Paragraph A is more readable than paragraph B.","Paragraph A
To overcome this deadlock, recent research initiatives have advocated for the development of automated context-aware recommender systems that automatically generate high-quality documentation, contextual to any given task at hand. This has led to a first wave of automated approaches for the generation and recommendation of documentation (e.g.,).


Paragraph B
To overcome this deadlock, recent research initiatives have advocated for the development of automated context-aware recommender systems that automatically generate high-quality documentation, contextual to any given task at hand; and exemplified by a first wave of automated approaches for the generation and recommendation of documentation (e.g.,).



Paragraph A is more readable than paragraph B.","Paragraph A
Previous studies have investigated software documentation from different aspects, mainly focusing on tools & approaches for manual and automated documentation, and (empirical) studies aimed at investigation different aspects such as documentation issues, developer concerns, among other. In the following, we summarize the closest ones to our with special emphasis on the empirical studies.


Paragraph B
Previous studies have investigated software documentation from different aspects, mainly focusing on tools & approaches and (empirical) studies. In the following, we summarize the closest ones to ours.



Paragraph A is more readable than paragraph B.","Paragraph A
Referring to deprecated information is another reason for up-to-dateness issues and can affect several types of documentation in different ways. It includes having deprecated information in the project's website (e.g.,**""homepage recommends deprecated commands""), outdated copyright information and version numbers in the code base, as well as outdated references (e.g., links to old versions of the system in the documentation), which was the most prevalent issue within this category. For example, one user reported that ""the example linked in the documentation is using the 3.x version of the API, and that may be confusing to readers"".


Paragraph B
Referring to deprecated information is also one of the main reasons for up-to-dateness issues, and can affect several types of documentation in different ways: It includes having deprecated information in the project's website (e.g.,**""homepage recommends deprecated commands""), outdated copyright information and version numbers in the code base, as well as outdated references (e.g., links to old versions of the system in the documentation), which was the most prevalent issue within this category. For example, one user reported that ""the example linked in the documentation is using the 3.x version of the API, and that may be confusing to readers"".



Paragraph A is more readable than paragraph B.","Paragraph A
Tools & Approaches. A plethora of works have been focused on supporting the automated generation and retrieval. For example, software summarization techniques and tools with the goal of providing abstractive and extractive summaries has been porposed for a diverse set of software artifacts, such as bug reports, classes and methods, unit tests, commit messages, release notes, user reviews, code snippets, and user stories.


Paragraph B
Software summarization techniques and tools with the goal of providing abstractive and extractive summaries has been studied for a diverse set of software artifacts, such as bug reports, classes and methods, unit tests, commit messages, release notes, user reviews, code examples and user stories.



Paragraph A is more readable than paragraph B.","Paragraph A
Moreover, since our goal is to further research in the context of documentation recommender systems, the second contribution of this paper is an insight into the types of documentation that practitioners perceive as useful when confronted with specific software engineering tasks. Therefore, we formulate our second RQ as:.


Paragraph B
Moreover, since our goal is to further research in the context of documentation recommender systems, the second contribution of this paper is a study with practitioners to understand what types of documentation they perceive as useful when confronted with specific software engineering tasks, to answer our second RQ:.



Paragraph A is more readable than paragraph B.","Paragraph A
(Empirical) Studies. Software documentation has been analyzed in diverse empirical studies that (i) report evidence of its importance and impact in the software life cycle, (ii) describe problems that developers face when dealing with it, (iii) list quality attributes required in documentation, (iv) provide recommendations for constructing it (including standards), and (v) propose frameworks and tools for evaluating documentation concerns such as cost, benefit and quality attributes. Due to space limitations we summarize the closest ones to our study in Table [tab:related_SwTechDocWorks].


Paragraph B
On the other side, documentation has been analyzed with a diversity of empirical studies that (i) report evidence of its importance and impact in the software cycle development, (ii) describe problems developers face when dealing with it, (iii) list quality attributes required in software documentation, (iv) provide recommendations for constructing it (including standards) , or (v) propose frameworks and tools for evaluating documentation concerns such as cost, benefit and quality attributes of software documentation.



Paragraph A is more readable than paragraph B.","Paragraph A
Completeness accounts for %53 of issues in this section. We observed different causes of incompleteness such as missing explanation (e.g.,**""is there any idea what ""frequently used"" might mean?""), a component in a library (e.g.,**""The documentation on [...] is missing information about the toolbar buttons""), API behavior clarification (e.g.,**""I think that we should add documentation ensuring that the user passes a tree with reset bounds""), or compatibility information (e.g.,**""Explicitly mention if clang 4.x, 5.x are supported"").


Paragraph B
Example: We observed different causes of incompleteness such as missing explanation (e.g.,**""is there any idea what ""frequently used"" might mean?""), a component in a library (e.g.,**""The documentation on [...] is missing information about the toolbar buttons""), API behavior clarification (e.g.,**""I think that we should add documentation ensuring that the user passes a tree with reset bounds""), or compatibility information (e.g.,**""Explicitly mention if clang 4.x, 5.x are supported"").



Paragraph A is more readable than paragraph B.","Paragraph A
Common Solution: Writing script was the most adopted solution regarding the automatic documentation deployment. Concerning the missing features there was no specific solution and individuals usually were pointed to different possible alternatives (e.g.,).


Paragraph B
Common Solution: Writing script is the most adopted solution regarding the automatic documentation deployment, while regarding the missing features there was no common solution (if any) and individuals usually points to different possible alternatives (e.g.,).



Paragraph A is more readable than paragraph B.","Paragraph A
Interestingly, in another thread of the Apache httpd mailing list they discuss an issue of harmful warning messages originating from meta-information they also use to enforce up-to-dateness of different translations. As they conclude, ""The whole point of the comment is to see which exact revisions of the original file you have to diff to see the changes."".


Paragraph B
However, we found one case in Apache httpd documentation mailing list where the traceability information between translations of a document was still managed manually, e.g., by adding a line of comment at top of translations referring to original document and more particularly ""The whole point of the comment is to see which exact revisions of the original file you have to diff to see the changes."".



Paragraph A is more readable than paragraph B.","Paragraph A
Some developers adopt preventative solutions to ensure the documentation up-to-dateness, adding documentation up-to-dateness as one of the items to check in the contribution to-do list, or even pushing this forward by making Javadoc update mandatory for pull request acceptance.


Paragraph B
Interestingly, we observed that developers adopt preventative solutions to ensure the up-to-dateness of the project's documentation. For example, some projects have added documentation up-to-dateness as one of the items to check in the contribution to-do list, and others have pushed this forward by making Javadoc update mandatory for pull request acceptance.



Paragraph A is more readable than paragraph B.","Paragraph A
Example: We observed different causes of incompleteness such as missing explanation (e.g.,**""is there any idea what ""frequently used"" might mean?""), a component in a library (e.g.,**""The documentation on [...] is missing information about the toolbar buttons""), API behavior clarification (e.g.,**""I think that we should add documentation ensuring that the user passes a tree with reset bounds""), or compatibility information (e.g.,**""Explicitly mention if clang 4.x, 5.x are supported"").


Paragraph B
Example: The incompleteness could raise from different things such as missing explanation (e.g.,**""is there any idea what ""frequently used"" might mean?""), a component in a library (e.g.,**""The documentation on [...] is missing information about the toolbar buttons""), API behavior clarification (e.g.,**""I think that we should add documentation ensuring that the user passes a tree with reset bounds""), or compatibility information (e.g.,**""Explicitly mention if clang 4.x, 5.x are supported""). Fig 4.4 illustrate other type of missing information we observed.



Paragraph A is more readable than paragraph B.","Paragraph A
The empirical studies in the literature can be classified based on their main goal into five broad categories: Studies (i) investigating the importance and impact of documentation in the software life cycle; (ii) describing developers issues and concerns when dealing with software documentation; (iii) investigating the quality attributes required in documentation artifacts; (iv) providing guidelines and recommendations on how to write and maintain documentation; and (v) proposing frameworks and tools for assessing developers' concerns in this context.


Paragraph B
(Empirical) Studies. A variety of empirical studies have targeted software documentation artifacts aiming at (i) investigating its importance and impact in software life cycle, (ii) describing developers issues and concerns when dealing with software documentation, (iii) investigating the quality attributes required in documentation artifacts, (iv) providing guidelines and recommendations for constructing it, and (v) proposing frameworks and tools for assessing developers' concern in this context (such as cost, benefit and quality attributes).



Paragraph A is more readable than paragraph B."
"{""ImportId"":""recordedDate"",""timeZone"":""Europe/Berlin""}","{""ImportId"":""_recordId""}","{""ImportId"":""QID3""}","{""ImportId"":""QID5""}","{""ImportId"":""QID7""}","{""ImportId"":""QID6""}","{""ImportId"":""QID9""}","{""ImportId"":""QID8""}","{""ImportId"":""QID10""}","{""ImportId"":""QID11""}","{""ImportId"":""QID12""}","{""ImportId"":""QID13""}","{""ImportId"":""QID15""}","{""ImportId"":""QID14""}","{""ImportId"":""QID18""}","{""ImportId"":""QID17""}","{""ImportId"":""QID16""}","{""ImportId"":""QID19""}","{""ImportId"":""QID20""}","{""ImportId"":""QID22""}","{""ImportId"":""QID21""}","{""ImportId"":""QID23""}","{""ImportId"":""QID26""}","{""ImportId"":""QID25""}","{""ImportId"":""QID24""}","{""ImportId"":""QID27""}","{""ImportId"":""QID29""}","{""ImportId"":""QID28""}","{""ImportId"":""QID30""}","{""ImportId"":""QID33""}","{""ImportId"":""QID32""}","{""ImportId"":""QID31""}","{""ImportId"":""QID35""}","{""ImportId"":""QID34""}","{""ImportId"":""QID37""}","{""ImportId"":""QID36""}","{""ImportId"":""QID38""}","{""ImportId"":""QID39""}","{""ImportId"":""QID40""}","{""ImportId"":""QID42""}","{""ImportId"":""QID41""}","{""ImportId"":""QID44""}","{""ImportId"":""QID43""}","{""ImportId"":""QID45""}","{""ImportId"":""QID47""}","{""ImportId"":""QID46""}","{""ImportId"":""QID49""}","{""ImportId"":""QID48""}","{""ImportId"":""QID50""}","{""ImportId"":""QID51""}","{""ImportId"":""QID52""}","{""ImportId"":""QID53""}","{""ImportId"":""QID55""}","{""ImportId"":""QID58""}","{""ImportId"":""QID57""}","{""ImportId"":""QID56""}","{""ImportId"":""QID59""}","{""ImportId"":""QID61""}","{""ImportId"":""QID60""}","{""ImportId"":""QID62""}","{""ImportId"":""QID63""}","{""ImportId"":""QID64""}","{""ImportId"":""QID54""}"
2020-05-06 14:44:41,R_2Sf8jHwzSbFraR2,Professor,,,Neither agree nor disagree,,,,,,Neither agree nor disagree,,,Somewhat agree,,,,,,,Somewhat disagree,,,,,,,Somewhat disagree,,,,,,,,,Neither agree nor disagree,,,,,,,,Somewhat agree,,,,,Neither agree nor disagree,,,,,,,Somewhat agree,,,,,Somewhat disagree
2020-05-06 14:49:57,R_1qe49WBdYQHVIC0,PhD,,Neither agree nor disagree,,,,,,,,,Somewhat agree,,,,,Somewhat disagree,,,,,Somewhat agree,,,,,,,Somewhat disagree,,,,,,,,Somewhat agree,,,,Somewhat agree,,,,,,,Somewhat agree,,,,,,Somewhat agree,,,Somewhat agree,,,,
2020-05-06 14:53:39,R_yBzrUpnniw4HCkp,Master's degree,,,,,,Somewhat disagree,Somewhat agree,,,,,,,,,,,Neither agree nor disagree,,,,,,,Neither agree nor disagree,,Somewhat agree,,,,,,Strongly agree,,,,,,Strongly agree,,,,,,,,,Somewhat disagree,,,,Neither agree nor disagree,,Somewhat agree,,,,,,
2020-05-06 15:07:11,R_vBNcuWBjpxCxW2l,PhD,,,,,,Strongly agree,,,,Strongly agree,,,Strongly disagree,,,,,,Somewhat disagree,,,,,,,,Somewhat agree,,,,,,,,,Somewhat disagree,Neither agree nor disagree,,,,,,,Neither agree nor disagree,,,,,,Somewhat disagree,,,,Neither agree nor disagree,,,,,,
2020-05-06 15:21:49,R_3rSYx78iHZJXiHP,Master's degree,,Somewhat agree,,,,,,,,Somewhat disagree,,,,,,Somewhat agree,,,,,Somewhat disagree,,,,,,Strongly agree,,,Somewhat disagree,,,,,,,Somewhat agree,,,,,,,,Somewhat agree,,,,,,,,Strongly disagree,Strongly agree,,,,,,
2020-05-06 15:24:44,R_2sbbcOtHAuRI4I9,PhD,,,,Somewhat disagree,,,,Somewhat agree,,,,,,,,Strongly agree,,,,,,,Strongly agree,,,Neither agree nor disagree,,,,,,,,Somewhat agree,,,Somewhat disagree,,,,,,,,,,,Somewhat agree,,,Neither agree nor disagree,,,Neither agree nor disagree,,,,,,
2020-05-06 16:27:52,R_29vru7q5CJ98yzq,Bachelor's degree,Neither agree nor disagree,,,,,,Somewhat disagree,,,,,,,,Strongly agree,,,,,,,Somewhat disagree,,,,,,Somewhat agree,,Somewhat disagree,,,,,,,,Somewhat disagree,,,,,,Somewhat disagree,,,,,,,,,,,,,,,Somewhat disagree,Somewhat agree
2020-05-06 17:03:21,R_UxojytqMVae2qtP,Bachelor's degree,,,,,Strongly disagree,,,,,Neither agree nor disagree,,Somewhat agree,,,,,,,,,,Strongly disagree,,,,,,,,,Somewhat disagree,,,,,Somewhat agree,,,Strongly agree,,,,,,,,,Neither agree nor disagree,,,Neither agree nor disagree,,,,Somewhat agree,,,,,
2020-05-06 17:43:28,R_1rdCf8KahWgDe0e,Bachelor's degree,,,,,,Somewhat agree,Somewhat disagree,,,,,,,,,Somewhat disagree,,,Somewhat disagree,,,,,,,,,Somewhat agree,,,,,,,,Somewhat disagree,,Somewhat disagree,,,,,,,,,,Strongly disagree,,,Somewhat agree,,,,,Somewhat disagree,,,,
2020-05-06 18:52:20,R_ZpEApncngPZN9Rf,Master's degree,,,Strongly agree,,,,,,,,,,,Strongly disagree,,Somewhat disagree,,,,,,,Strongly agree,,,,Strongly agree,,,,,,Strongly disagree,,,,,Strongly agree,,,,,,,,,Strongly disagree,,,,,,Strongly disagree,,,Somewhat agree,,,,
2020-05-07 00:29:00,R_x3frHDHnq8LQsQp,PhD,,,,,Somewhat disagree,,,Strongly agree,,,,,Strongly disagree,,,,,,,,,Neither agree nor disagree,,,,,,,,,Somewhat disagree,Somewhat agree,,,,,Strongly disagree,,,,,,,,,Strongly agree,,,,,,,,,,,,Strongly agree,,Somewhat agree
2020-05-07 00:51:17,R_11i4q1oXXFExHeY,PhD,,,,Somewhat agree,,,,,Somewhat agree,,,,,,,,,Strongly disagree,,,,,,,Neither agree nor disagree,,,,,,Somewhat disagree,Somewhat disagree,,,,,,,Somewhat agree,,,,,Neither agree nor disagree,,,,,,,,Somewhat disagree,,,,,,Somewhat agree,,
